 function [covarEst,uEst] = pred_step(uPrev,covarPrev,angVel,acc,dt)
%covarPrev and uPrev are the previous mean and covariance respectively
%angVel is the angular velocity
%acc is the acceleration
%dt is the sampling time

% syms 'p' 'q' 'pDot' 'bg' 'ba' 'wm' 'am' 'g' [3 1]
% syms psis theta phi wx wy wz ax ay az bgx bgy bgz bax bay baz posx posy posz q1 q2 q3 vx vy vz ngx ngy ngz nax nay naz nbgx nbgy nbgz nbax nbay nbaz n
% syms nDumb ng na nbg nba [3 1]
% syms Rot
% syms G
% 
% 
% 
% Rx = [1 0 0 ; 0 cos(phi) -sin(phi); 0 sin(phi) cos(phi)];
% Ry = [cos(theta) 0 sin(theta); 0 1 0; -sin(theta) 0 cos(theta)];
% Rz = [cos(psis) -sin(psis) 0; sin(psis) cos(psis) 0; 0 0 1];
% 
% Rot = Rz * Ry * Rx;
% 
% G = [cos(psis)*cos(theta) -sin(psis) 0; sin(psis)*cos(theta) cos(psis) 0 ; -sin(theta) 0 1];
% 
% 
% 
% 
% x1 = [posx; posy; posz];
% x2 = [phi; theta; psis];
% x3 = [vx; vy; vz];
% x4 = [bgx; bgy; bgz];
% x5 = [bax; bay; baz];
% 
% wm = [wx; wy; wz];
% am = [ax; ay; az];
% 
% ng = [ngx; ngy; ngz];
% na = [nax; nay; naz];
% nbg = [nbgx; nbgy; nbgz];
% nba = [nbax; nbay; nbaz];
% 
% n = [ng; na; nbg; nba];
% 
% 
% f1 = x3;
% f2 = inv(G)*(wm - x4 - ng);
% f3 = g + Rot*(am - x5 - na);
% f4 = nbg;
% f5 = nba;
% 
% fx = [f1;f2;f3;f4;f5];
% state = [x1;x2;x3;x4;x5];
% 
% 
% 
% 
% At = jacobian(fx,state);
% At = subs(At,[ng;na;nbg;nba],zeros(12,1));
% 
% At = simplify(At)
% 
% Ut = jacobian(fx,n);
% Ut = simplify(Ut)

% fx = subs(fx,[psis theta phi pDot1 pDot2 pDot3],[uPrev(4) uPrev(5) uPrev(6) uPrev(7) uPrev(8) uPrev(9)]);
% fx = subs(fx,[bg1 bg2 bg3 ba1 ba2 ba3],[uPrev(10) uPrev(11) uPrev(12) uPrev(13) uPrev(14) uPrev(15)]);
% fx = subs(fx,[ng1 ng2 ng3 na1 na2 na3 nbg1 nbg2 nbg3 nba1 nba2 nba3],[0 0 0 0 0 0 0 0 0 0 0 0]);
% fx = subs(fx,[wm1 wm2 wm3 am1 am2 am3 g1 g2 g3], [angVel(1) angVel(2) angVel(3) acc(1) acc(2) acc(3) 0 0 -9.81]);
% fx = double(fx);

% covarEst = subs(covarEst,[psis theta phi],[uPrev(4) uPrev(5) uPrev(6)] );
% covarEst = double(covarEst);
%covarEst = (Ft * covarPrev * Ft') + (Vt * Qd * Vt');


At = partialX(uPrev(4:6), uPrev(10:12), uPrev(13:15), angVel, acc);
Ut = partialN(uPrev(4:6));

Ft = eye(15) + dt.*At;








% extract values from uPrev
%p = uPrev(1:3);
q = uPrev(4:6);
pDot = uPrev(7:9);
ba = uPrev(13:15);
bg = uPrev(10:12);

g = [0;0;-9.81];

% generate R and G matrices from q
Rq = calcR(q);
Gq = calcG(q);

nbg = zeros(3,1);
nba = zeros(3,1);
ng = zeros(3,1);
na = zeros(3,1);





%construct Process model
xDot = zeros(15,1);

xDot(1:3) = pDot;
xDot(4:6) = Gq\(angVel-bg-ng); 
xDot(7:9) = g + (Rq*(acc-ba-na)); 
xDot(10:12) = nbg;
xDot(13:15) = nba;

Qg = 0.5;
Qg = [Qg,Qg,Qg];
Qg = diag(Qg);
Qg = [Qg;zeros(9,3)];

Qbg = 1;
Qbg = [Qbg,Qbg,Qbg];
Qbg = diag(Qbg);
Qbg = [zeros(6,3);Qbg;zeros(3)];

Qa = 3;
Qa = [Qa,Qa,Qa];
Qa = diag(Qa);
Qa = [zeros(3);Qa;zeros(6,3)];

Qba = 1;
Qba = [Qba,Qba,Qba];
Qba = diag(Qba);
Qba = [zeros(9,3);Qba];

Q = [Qg,Qa,Qbg,Qba];

Qd = Q * dt;

%make predicted u and covar
uEst = uPrev + (dt * xDot);
covarEst = Ft*covarPrev*Ft' + Ut*Qd*Ut';




end


function Rot = calcR(eulerAng)
phi = eulerAng(1);
theta = eulerAng(2);
psi = eulerAng(3);




%Initialize rotations
RZ = zeros(3,3);
RY = zeros(3,3);
RX = zeros(3,3);

%%%%%%%%%    RX
RX(1,1) = 1;
RX(2,1) = 0;
RX(3,1) = 0;

RX(1,2) = 0;
RX(2,2) = cos(phi);
RX(3,2) = sin(phi);

RX(1,3) = 0;
RX(2,3) = -sin(phi);
RX(3,3) = cos(phi);



RY(1,1) = cos(theta);
RY(2,1) = 0;
RY(3,1) = -sin(theta);

RY(1,2) = 0;
RY(2,2) = 1;
RY(3,2) = 0;

RY(1,3) = sin(theta);
RY(2,3) = 0;
RY(3,3) = cos(theta);



%%%%%%% RZ
RZ(1,1) = cos(psi);
RZ(2,1) = sin(psi);
RZ(3,1) = 0;

RZ(1,2) = -sin(psi);
RZ(2,2) = cos(psi);
RZ(3,2) = 0;

RZ(1,3) = 0;
RZ(2,3) = 0;
RZ(3,3) = 1;


Rot = RZ*RY*RX;

return 

end


function Gq = calcG(eulerAng)
theta = eulerAng(2);
psi = eulerAng(3);

Gq = zeros(3,3);


Gq(1,1) = cos(psi)*cos(theta);
Gq(2,1) = sin(psi)*cos(theta);
Gq(3,1) = -sin(theta);


Gq(1,2) = -sin(psi);
Gq(2,2) = cos(psi);
Gq(3,2) = 0;


Gq(1,3) = 0;
Gq(2,3) = 0;
Gq(3,3) = 1;


return



end

function At = partialX(eulerAng, bg, ba, wm, acc)
phi = eulerAng(1);
theta = eulerAng(2);
psi = eulerAng(3);

bax = ba(1);
bay = ba(2);
baz = ba(3);

bgx = bg(1);
bgy = bg(2);
%bgz = bg(3);

wx = wm(1);
wy = wm(2);
%wz = wm(3);

ax = acc(1);
ay = acc(2);
az = acc(3);

At1 = zeros(15,3);

At2 = zeros(15,3);
At2(7,1) = (sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta))*(ay - bay) + (cos(phi)*sin(psi) - cos(psi)*sin(phi)*sin(theta))*(az - baz);
At2(8,1) =  - (cos(psi)*sin(phi) - cos(phi)*sin(psi)*sin(theta))*(ay - bay) - (cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta))*(az - baz);
At2(9,1) = cos(phi)*cos(theta)*(ay - bay) - cos(theta)*sin(phi)*(az - baz);

At2(4,2) = -(sin(theta)*(bgx*cos(psi) + bgy*sin(psi) - wx*cos(psi) - wy*sin(psi)))/cos(theta)^2;
At2(6,2) = -(bgx*cos(psi) + bgy*sin(psi) - wx*cos(psi) - wy*sin(psi))/cos(theta)^2;
At2(7,2) = cos(phi)*cos(psi)*cos(theta)*(az - baz) - cos(psi)*sin(theta)*(ax - bax) + cos(psi)*cos(theta)*sin(phi)*(ay - bay);
At2(8,2) = cos(phi)*cos(theta)*sin(psi)*(az - baz) - sin(psi)*sin(theta)*(ax - bax) + cos(theta)*sin(phi)*sin(psi)*(ay - bay);
At2(9,2) = - cos(theta)*(ax - bax) - cos(phi)*sin(theta)*(az - baz) - sin(phi)*sin(theta)*(ay - bay);

At2(4,3) = -(bgy*cos(psi) - bgx*sin(psi) - wy*cos(psi) + wx*sin(psi))/cos(theta);
At2(5,3) = bgx*cos(psi) + bgy*sin(psi) - wx*cos(psi) - wy*sin(psi);
At2(6,3) = -(sin(theta)*(bgy*cos(psi) - bgx*sin(psi) - wy*cos(psi) + wx*sin(psi)))/cos(theta);
At2(7,3) = (cos(psi)*sin(phi) - cos(phi)*sin(psi)*sin(theta))*(az - baz) - (cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta))*(ay - bay) - cos(theta)*sin(psi)*(ax - bax);
At2(8,3) = (sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta))*(az - baz) - (cos(phi)*sin(psi) - cos(psi)*sin(phi)*sin(theta))*(ay - bay) + cos(psi)*cos(theta)*(ax - bax);



At3 = eye(3);
At3 = [At3;zeros(12,3)];

At4 = zeros(15,3);
At4(4,1) = -cos(psi) / cos(theta);
At4(5,1) = sin(psi);
At4(6,1) = (-cos(psi)*sin(theta)) / cos(theta);
At4(4,2) = -sin(psi) /cos(theta);
At4(5,2) = -cos(psi);
At4(6,2) = (-sin(psi)*sin(theta)) / cos(theta);
At4(6,3) = -1;

At5 = zeros(15,3);

At5(7,1) = - cos(psi)*cos(theta);
At5(8,1) = -cos(theta)*sin(psi);
At5(9,1) = sin(theta);

At5(7,2) = cos(phi)*sin(psi) - cos(psi)*sin(phi)*sin(theta);
At5(8,2) = - cos(phi)*cos(psi) - sin(phi)*sin(psi)*sin(theta);
At5(9,2) = -cos(theta)*sin(phi);

At5(7,3) = - sin(phi)*sin(psi) - cos(phi)*cos(psi)*sin(theta);
At5(8,3) = cos(psi)*sin(phi) - cos(phi)*sin(psi)*sin(theta);
At5(9,3) = -cos(phi)*cos(theta);


At = [At1, At2, At3, At4, At5];



end


function Ut = partialN(eulerAng)
phi = eulerAng(1);
theta = eulerAng(2);
psi = eulerAng(3);

Ut1 = zeros(15,3);

Ut1(4,1) = -cos(psi)/cos(theta);
Ut1(5,1) = sin(psi);
Ut1(6,1) = -(cos(psi)*sin(theta))/cos(theta);
Ut1(4,2) = -sin(psi)/cos(theta);
Ut1(5,2) = -cos(psi);
Ut1(5,3) = -(sin(psi)*sin(theta))/cos(theta);
Ut1(6,3) = -1;


Ut2 = zeros(15,3);

Ut2(7,1) = - cos(psi)*cos(theta);
Ut2(8,1) = -cos(theta)*sin(psi);
Ut2(9,1) = sin(theta);

Ut2(7,2) = cos(phi)*sin(psi) - cos(psi)*sin(phi)*sin(theta);
Ut2(8,2) = - cos(phi)*cos(psi) - sin(phi)*sin(psi)*sin(theta);
Ut2(9,2) = -cos(theta)*sin(phi);

Ut2(7,3) = - sin(phi)*sin(psi) - cos(phi)*cos(psi)*sin(theta);
Ut2(8,3) = cos(psi)*sin(phi) - cos(phi)*sin(psi)*sin(theta);
Ut2(9,3) = -cos(phi)*cos(theta);


Ut3 = [zeros(9,6);eye(6)];




Ut = [Ut1, Ut2, Ut3];




end
